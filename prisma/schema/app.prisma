enum NotificationType {
  ORDER_PLACED
  ORDER_PENDING
  ORDER_CHANGED
  PRODUCT_LOW_STOCK
}

enum OrderStatus {
  PENDING
  WAIT_FOR_CONFIRMATION
  WAIT_FOR_DELIVERY
  DELIVERING
  COMPLETED
  CANCELED
  EXPIRED
}

enum PaymentMethod {
  CASH
  TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id         Int              @id @default(autoincrement())
  content    String
  user_id    String
  href       String           @db.VarChar(255)
  type       NotificationType
  read       Boolean          @default(false)
  delivered  Boolean          @default(false)
  data       Json             @db.JsonB
  created_at DateTime         @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("notification")
}

model Order {
  id            String      @id @default(uuid())
  code          String
  user_id       String
  address       String
  phone_number  String
  receiver_name String
  email         String
  total_money   Float
  note          String
  status        OrderStatus
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  user      User           @relation(fields: [user_id], references: [id])
  histories OrderHistory[]
  details   OrderDetail[]
  payments  Payment[]
  Review    Review[]

  @@index([user_id, status])
  @@map("shop_order")
}

model OrderDetail {
  id                Int    @id @default(autoincrement())
  product_detail_id String
  order_id          String
  quantity          Int
  price             Float
  total             Float

  order Order @relation(fields: [order_id], references: [id])

  @@map("order_detail")
}

model OrderHistory {
  id            Int         @id @default(autoincrement())
  order_id      String
  action_status OrderStatus
  note          String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  order Order @relation(fields: [order_id], references: [id])

  @@index([order_id, action_status])
  @@map("order_history")
}

model Payment {
  id               Int           @id @default(autoincrement())
  order_id         String
  method           PaymentMethod
  transaction_code String
  total            Float
  description      String
  status           PaymentStatus
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  order Order @relation(fields: [order_id], references: [id])

  @@map("payment")
}

model Brand {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("brand")
}

model Color {
  id         String   @id @default(uuid())
  name       String
  code       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("color")
}

model Material {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("material")
}

model Size {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("size")
}

model Product {
  id          String   @id @default(uuid())
  code        String
  name        String
  description String?
  thumbnail   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  details ProductDetail[]

  @@map("product")
}

model ProductDetail {
  id          Int      @id @default(autoincrement())
  product_id  String
  color_id    String
  size_id     String
  material_id String
  brand_id    String
  price       Float
  image       String
  quantity    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  product  Product  @relation(fields: [product_id], references: [id])
  color    Color    @relation(fields: [color_id], references: [id])
  size     Size     @relation(fields: [size_id], references: [id])
  material Material @relation(fields: [material_id], references: [id])
  brand    Brand    @relation(fields: [brand_id], references: [id])
  reviews  Review[]

  @@unique([product_id, color_id, size_id, material_id, brand_id])
  @@index([product_id, color_id, size_id, material_id, brand_id])
  @@map("product_detail")
}

model Review {
  id                String       @id @default(uuid())
  comment           String       @db.Text
  rating            Int          @default(1)
  image             String       @db.Text
  status            ReviewStatus @default(PENDING)
  product_detail_id Int
  user_id           String
  order_id          String
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  product_detail ProductDetail @relation(fields: [product_detail_id], references: [id])
  user           User          @relation(fields: [user_id], references: [id])
  order          Order         @relation(fields: [order_id], references: [id])

  @@map("review")
}
