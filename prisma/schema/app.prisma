enum NotificationType {
  ORDER_PLACED
  ORDER_PENDING
  ORDER_CHANGED
  PRODUCT_LOW_STOCK
}

enum OrderStatus {
  PENDING
  WAIT_FOR_CONFIRMATION
  WAIT_FOR_DELIVERY
  DELIVERING
  COMPLETED
  CANCELED
  EXPIRED
}

enum PaymentMethod {
  CASH
  TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id         Int              @id @default(autoincrement())
  content    String
  user_id    String
  href       String           @db.VarChar(255)
  type       NotificationType
  read       Boolean          @default(false)
  delivered  Boolean          @default(false)
  data       Json             @db.JsonB
  created_at DateTime         @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification")
}

model Order {
  id            String        @id @default(uuid())
  code          String
  user_id       String?
  address       String
  phone_number  String
  receiver_name String
  email         String
  total_money   Float
  note          String?
  method        PaymentMethod
  status        OrderStatus
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  user      User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  histories OrderHistory[] @relation("OrderToOrderHistory")
  details   OrderDetail[]  @relation("OrderToOrderDetail")
  payments  Payment[]      @relation("OrderToPayment")
  Review    Review[]       @relation("OrderToReview")

  @@index([user_id, status])
  @@map("shop_order")
}

model OrderDetail {
  id                Int    @id @default(autoincrement())
  product_detail_id String
  order_id          String
  quantity          Int
  price             Float
  total             Float

  order Order @relation("OrderToOrderDetail", fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_detail")
}

model OrderHistory {
  id            Int         @id @default(autoincrement())
  order_id      String
  action_status OrderStatus
  note          String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  order Order @relation("OrderToOrderHistory", fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id, action_status])
  @@map("order_history")
}

model Payment {
  id               Int           @id @default(autoincrement())
  order_id         String
  method           PaymentMethod
  transaction_code String
  total            Float
  description      String
  status           PaymentStatus
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  order Order @relation("OrderToPayment", fields: [order_id], references: [id], onDelete: Cascade)

  @@map("payment")
}

model Brand {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("brand")
}

model Color {
  id         String   @id @default(uuid())
  name       String
  code       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("color")
}

model Material {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("material")
}

model Size {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product_details ProductDetail[]

  @@map("size")
}

model Product {
  id          String   @id @default(uuid())
  code        String
  name        String
  description String?
  thumbnail   String?
  brand_id    String
  material_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  material Material @relation(fields: [material_id], references: [id], onDelete: Cascade)
  brand    Brand    @relation(fields: [brand_id], references: [id], onDelete: Cascade)

  details ProductDetail[]
  reviews Review[]

  @@map("product")
}

model ProductDetail {
  id         String   @id @default(uuid())
  product_id String
  color_id   String
  size_id    String
  price      Float
  image      String?
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  color   Color   @relation(fields: [color_id], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [size_id], references: [id], onDelete: Cascade)

  @@unique([product_id, color_id, size_id])
  @@index([product_id, color_id, size_id])
  @@map("product_detail")
}

model Review {
  id         String       @id @default(uuid())
  comment    String       @db.Text
  rating     Int          @default(1)
  image      String       @db.Text
  status     ReviewStatus @default(PENDING)
  product_id String
  user_id    String
  order_id   String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order   Order   @relation("OrderToReview", fields: [order_id], references: [id], onDelete: Cascade)

  @@map("review")
}
